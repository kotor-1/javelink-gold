"""""" import numpy as np from scipy.signal import savgol_filter from dataclasses import dataclass from typing import Optional import logging from app.models.schemas import ViewType from app.services.detectors import PoseDetector from app.config import SAVGOL_WINDOW, SAVGOL_POLY, FOOT_CONTACT_VELOCITY_THRESHOLD logger = logging.getLogger(__name__) @dataclass class Events: """""" penultimate_frame: Optional[int] = None plant_frame: Optional[int] = None release_frame: Optional[int] = None def detect_events( keypoints: np.ndarray, fps: float, view: ViewType, object_positions: Optional[np.ndarray] = None ) -> Events: """ Args: keypoints: (T, 17, 2) fps: view: object_positions: (T, 2) Returns: Events: """ T = len(keypoints) # left_ankle_y = keypoints[:, PoseDetector.LEFT_ANKLE, 1] right_ankle_y = keypoints[:, PoseDetector.RIGHT_ANKLE, 1] # left_ankle_y_smooth = savgol_filter(left_ankle_y, SAVGOL_WINDOW, SAVGOL_POLY) right_ankle_y_smooth = savgol_filter(right_ankle_y, SAVGOL_WINDOW, SAVGOL_POLY) # left_vy = np.gradient(left_ankle_y_smooth) * fps right_vy = np.gradient(right_ankle_y_smooth) * fps # left_contact = np.abs(left_vy) < FOOT_CONTACT_VELOCITY_THRESHOLD right_contact = np.abs(right_vy) < FOOT_CONTACT_VELOCITY_THRESHOLD # Plant plant_frame = None for i in range(T-1, T//2, -1): # if left_contact[i] or right_contact[i]: plant_frame = i break # Penultimatelant penultimate_frame = None if plant_frame: for i in range(plant_frame-10, 0, -1): if left_contact[i] or right_contact[i]: penultimate_frame = i break # Release release_frame = None if view == ViewType.SIDE: # right_wrist = keypoints[:, PoseDetector.RIGHT_WRIST, :] left_wrist = keypoints[:, PoseDetector.LEFT_WRIST, :] # right_wrist_smooth = savgol_filter(right_wrist, SAVGOL_WINDOW, SAVGOL_POLY, axis=0) left_wrist_smooth = savgol_filter(left_wrist, SAVGOL_WINDOW, SAVGOL_POLY, axis=0) right_speed = np.linalg.norm(np.gradient(right_wrist_smooth, axis=0), axis=1) left_speed = np.linalg.norm(np.gradient(left_wrist_smooth, axis=0), axis=1) # if plant_frame: search_start = max(0, plant_frame - 20) search_end = min(T, plant_frame + 30) right_max = np.argmax(right_speed[search_start:search_end]) + search_start left_max = np.argmax(left_speed[search_start:search_end]) + search_start # if right_speed[right_max] > left_speed[left_max]: release_frame = right_max else: release_frame = left_max return Events( penultimate_frame=penultimate_frame, plant_frame=plant_frame, release_frame=release_frame ) 